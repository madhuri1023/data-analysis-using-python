a=pd.Series(np.array([11,12,13,15]))#creating a matrix

print('matrix a:\n',a)
Output:
matrix a:
 0    11
1    12
2    13
3    15
dtype: int32

print('addition:\n',a.add([1,3,4,5]))
output:
addition:
 0    12
1    15
2    17
3    20
dtype: int64

b=pd.Series(np.array([22,18,23,17]))#creating matrix b

print('matrix of b:\n',b)
output:
matrix of b:
 0    22
1    18
2    23
3    17
dtype: int32

print('combination of matrix b in a:\n',a.append(b),'\n')#combine matrix
output:
combination of matrix b in a:
 0    11
1    12
2    13
3    15
0    22
1    18
2    23
3    17
dtype: int32 

print('index:\n',a.append(b,ignore_index=True))#prints with index
output:
index:
 0    11
1    12
2    13
3    15
4    22
5    18
6    23
7    17
dtype: int32

print('updating:\n',a.update(pd.Series([2,3,4,5],)))
output:
None
0    2
1    3
2    4
3    5
dtype: int32

print('division of matrix b:\n',b.div(a),'\n')#division
output:
division of matrix b:
 0    11.00
1     6.00
2     5.75
3     3.40
dtype: float64 

print('modulus:\n',a.mod(3),'\n')#mod function
output:
modulus:
 0    2
1    0
2    1
3    2
dtype: int32 

print('mod division:\n',divmod(a,5),'\n')#mod division
output:
mod division:
 (0    0
1    0
2    0
3    1
dtype: int32, 0    2
1    3
2    4
3    0
dtype: int32) 

print('replace:\n',a.replace(11,78),'\n')#replace an element
output:
replace:
 0    2
1    3
2    4
3    5
dtype: int32 

print('difference:\n',a.diff(1),'\n')#subtrsction
output:
difference:
 0    NaN
1    1.0
2    1.0
3    1.0
dtype: float64 

print('list form:\n',a.tolist(),'\n')#coverts into list
output:
list form:
 [2, 3, 4, 5] 

print('commulative product:\n',a.cumprod(),'\n')#does commulative product
output:
commulative product:
 0      2
1      6
2     24
3    120
dtype: int32

print('all:\n',a.all(),'\n')#prints True if there is no Nan
output:
all:
 True 

print('any:\n',a.any(),'\n')#prints True if there any number
output:
any:
 True 

print('floordivision:\n',a.floordiv(2),'\n')
output:
floordivision:
 0    1
1    1
2    2
3    2
dtype: int32 
